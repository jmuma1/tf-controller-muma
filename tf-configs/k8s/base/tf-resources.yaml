# Assuming that you have a Flux-ready cluster running, 
# you can GitOps the resource here by defining a source (GitRepository)...
apiVersion: source.toolkit.fluxcd.io/v1
kind: GitRepository
metadata:
  name: tf-controller-muma
  namespace: flux-system
spec:
  interval: 30s
  url: ssh://git@github.com/jmuma1/tf-controller-muma
  ref:
    branch: main
  secretRef:
    name: ssh-credentials
#... then defining a Terraform object and attach it to the source, like the following:
---
apiVersion: infra.contrib.fluxcd.io/v1alpha2
kind: Terraform
metadata:
  name: aws-s3-bucket
  namespace: flux-system
spec:
  approvePlan: auto
  destroyResourcesOnDeletion: true
  writeOutputsToSecret:
    name: aws-s3-bucket-outputs
    outputs:
    # - bucket_id
    # - arn
    # - bucket
    - id
  path: ./stacks/random
  values:
    bucket: ndamukong
  interval: 1m
  # planOnly: true # controller will skip the apply part and runs only terraform plan and saves the output.
  storeReadablePlan: human
  sourceRef:
    kind: GitRepository
    name: infrastructure
    namespace: flux-system
---
apiVersion: infra.contrib.fluxcd.io/v1alpha2
kind: Terraform
metadata:
  name: aws-s3-bucket-acl
  namespace: flux-system
  # annotations:
  #   kustomize.toolkit.fluxcd.io/substitute: disabled
spec:
  path: ./stacks/so-random
  values:
    acl: private
    # acl: public-read
    # bucket: ${{ .aws_s3_bucket.bucket }}
    bucket: ${{ .aws_s3_bucket.ndamukong }}
  sourceRef:
    kind: GitRepository
    name: infrastructure
    namespace: flux-system
  approvePlan: auto
  interval: 3m
  dependsOn:
  - name: aws-s3-bucket
  readInputsFromSecrets:
  - name: aws-s3-bucket-outputs
    as: id
    # as: ./random
---
apiVersion: v1
kind: Secret
metadata:
  name: ssh-credentials
  namespace: flux-system
type: Opaque
stringData:
  identity: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    ???
    -----END OPENSSH PRIVATE KEY-----
  known_hosts: |
    ???